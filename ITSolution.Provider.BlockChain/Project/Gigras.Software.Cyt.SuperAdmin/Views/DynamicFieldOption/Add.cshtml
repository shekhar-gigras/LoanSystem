@using Gigras.Software.Database.Cyt.Entity.Models
@model FieldOption
@{
    ViewBag.Title = "Field DropDown Options";
}
<div class="full-page-heading">
    Add Field Option For Forms
</div>
<div class="post d-flex flex-column-fluid" id="kt_post">
    <!--begin::Container-->
    <div id="kt_content_container" class="container-xxl">
        <div id="form-wrapper">
            <form asp-action="AddSubmit" method="post" class="form">
                @if (!string.IsNullOrEmpty(ViewBag.Error))
                {
                    <div class="form-group">
                        <span class="error" style="color:red;">@ViewBag.Error</span>
                    </div>
                }
                <div class="form-group">
                    <label>Option Name</label>
                    <input asp-for="OptionName" class="form-control" required />
                </div>
                <div class="form-group">
                    <div class="form-check">
                        <input asp-for="IsDynamic" class="form-check-input" type="checkbox" id="IsDynamic" onchange="toggleSourceTable()" />
                        <label class="form-check-label">Is Dynamic</label>
                    </div>
                </div>
                <div id="optionsSourceWrapper" style="border: 1px solid #ccc; padding: 15px; border-radius: 8px; margin-top: 20px;">
                    <div id="optionsTableContainer" style="display:block;">
                        <div class="form-group">
                            <button type="button" class="btn btn-primary" onclick="addOption()">Add Option</button>
                        </div>
                        <div class="card-body pt-0">
                            <div class="table-responsive">
                                <table id="optionTable" class="table align-middle table-row-dashed fs-6 gy-5 mb-0">
                                    <thead>
                                        <tr class="text-start text-gray-400 fw-bolder fs-7 text-uppercase gs-0">
                                            <th>Option Label</th>
                                            <th>Option Value</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Dynamically added options will appear here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div id="sourceTableContainer" style="display:none; margin-top: 20px;">
                        <div class="form-group">
                            <label>Source Table</label>
                            <select asp-for="SourceTable" class="form-select form-control" id="SourceTable" name="SourceTable">
                                <option value="">None</option>
                                @foreach (var item in ViewBag.DbSetNames)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Text&Value Field</label>
                            <input asp-for="TextValueField" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Condition</label>
                            <input asp-for="Condition" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <a href="/sadmin/dynamic-fieldoption" class="btn btn-secondary">Back</a>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal to add Option -->
<div class="modal fade" id="addOptionModal" tabindex="-1" aria-labelledby="addOptionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addOptionModalLabel">Add Option</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Option Label</label>
                    <input type="text" id="OptionLabel" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Option Value</label>
                    <input type="text" id="OptionValue" class="form-control" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="addOptionToTable()">Add Option</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to toggle SourceTable visibility
    function toggleSourceTable() {
        debugger;
        var isDynamicChecked = document.getElementById('IsDynamic').checked;
        var optionsTableContainer = document.getElementById('optionsTableContainer');
        var sourceTableContainer = document.getElementById('sourceTableContainer');
        var source = document.getElementById('SourceTable');
        var condition = document.getElementById('Condition');
        clearOptionTable();

        if (isDynamicChecked) {
            // Show the option table and source table fields
            optionsTableContainer.style.display = 'none';
            sourceTableContainer.style.display = 'block';
            source.setAttribute("required", "true");
            condition.setAttribute("required", "true");
            source.value = "";  // Clear the value of SourceTable
            condition.value = ""; // Clear the value of Condition
        } else {
            // Hide the option table and source table fields, and clear options
            optionsTableContainer.style.display = 'block';
            sourceTableContainer.style.display = 'none';
            source.removeAttribute("required");
            condition.removeAttribute("required");
            source.value = "";  // Clear the value of SourceTable
            condition.value = ""; // Clear the value of Condition
        }
    }

    // Function to show modal for adding options
    function addOption() {
        const tableBody = document.querySelector("#optionTable tbody");

        const newRow = document.createElement("tr");

        newRow.innerHTML = `
                <td>
                    <input type="text" class="form-control" name="OptionLabel[]" placeholder="Option Label" required />
                </td>
                <td>
                    <input type="text" class="form-control" name="OptionValue[]" placeholder="Option Value" required />
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="removeOption(this)">Remove</button>
                </td>
            `;

        tableBody.appendChild(newRow);
        // var myModal = new bootstrap.Modal(document.getElementById('addOptionModal'));
        // myModal.show();
    }

    function addOptionToTable() {
        var optionLabel = document.getElementById("OptionLabel").value;
        var optionValue = document.getElementById("OptionValue").value;

        if (optionLabel && optionValue) {
            var table = document.getElementById("optionTable").getElementsByTagName('tbody')[0];
            var row = table.insertRow(table.rows.length);

            var cell1 = row.insertCell(0);
            var cell2 = row.insertCell(1);
            var cell3 = row.insertCell(2);

            cell1.innerHTML = optionLabel;
            cell2.innerHTML = optionValue;
            cell3.innerHTML = '<button class="btn btn-danger" onclick="removeOption(this)">Remove</button>';

            // Clear input fields after adding option
            document.getElementById("OptionLabel").value = '';
            document.getElementById("OptionValue").value = '';

            // Close the modal after adding the option
            var myModal = bootstrap.Modal.getInstance(document.getElementById('addOptionModal'));
            myModal.hide();
        }
    }

    // Function to remove an option from the table
    function removeOption(button) {
        const row = button.closest("tr");
        row.remove();

        // var row = button.parentNode.parentNode;
        // row.parentNode.removeChild(row);
    }

    function preserveTable() {
        // This function is called to ensure the table does not get cleared when IsDynamic is clicked
        var optionRows = document.getElementById("optionTable").getElementsByTagName('tbody')[0].rows;
        if (optionRows) {
            for (i = 0; i < optionRows.length - 1; i++) {
                removeOption(optionRows[i]);
            }
        }
        var isDynamic = document.getElementById("IsDynamic").checked;

        if (isDynamic) {
            document.getElementById("sourceTableContainer").style.display = "block";
        } else {
            document.getElementById("sourceTableContainer").style.display = "none";
        }
    }

    function clearOptionTable() {
        var table = document.getElementById("optionTable").getElementsByTagName('tbody')[0];
        table.innerHTML = '';  // Clear all rows
    }
</script>