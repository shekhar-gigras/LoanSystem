@using Gigras.Software.Database.Cyt.Entity.Models
@using Gigras.Software.Generic.DynamicControl
@inject Gigras.Software.Database.CytContext context
@model Form
@{
    if (Model != null)
    {
        ViewBag.Title = Model.FormName + " Form";
    }
    var LoanId =  Model != null && Model!.FieldValues != null &&
                                (Model.FieldValues.TryGetValue("LoanId", out var value) ||
                                Model.FieldValues.TryGetValue("LoanId", out value))
                                ? value?.ToString()
                                : Guid.NewGuid().ToString();
    int stateid = Model!.StateId == null ? 0 : Model.StateId.Value!;
    // if (Model.NavigationGroup!.ToLower() == "blank")
    // {
    //     Layout = "~/Views/Shared/_BlankLayout.cshtml";
    // }
}
<style>
    
</style>

@if (Model != null)
{
    <div class="full-page-heading">
        @Html.Raw(Model.FormDescription)
    </div>
    <div id="meta-container">
        <h1>Login with MetaMask</h1>
        <button id="loginMetaMaskButton">Login For Lender In MetaMask</button>
        <p id="metamaskstatus" class="status-disconnected">Please connect to MetaMask to log in.</p>
    </div>
    <div id="main-container" class="container mt-4">
        @* <h3>@Model.FormDescription</h3> *@
        <form method="post" action="/sadmin/borrower/submit-form" name="frmCreateAccount" id="frmCreateAccount" enctype="multipart/form-data">
            <input type="hidden" name="FormId" id="FormId" value="@Model.Id" />
            <input type="hidden" name="LoanId" id="LoanId" value="@LoanId" />
            @foreach (var formsection in Model.FormsSections!
           .Where(x => x.FormFields!.Count > 0)   // Filter out sections with no form fields
           .OrderBy(x => x.SortOrder))
            {
                <div class="card mb-4">
                    <div class="card-header bg-secondary text-white py-3" style="border-radius: 0.5rem 0.5rem 0 0;min-height:0px !important;">
                        <h3 class="mb-1" style="font-weight: 600;">@Html.Raw(formsection.SectionDescription)</h3>
                        @* <p class="mb-0" style="font-size: 0.9rem; opacity: 0.9;">@formsection.SectionDescription</p> *@
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var field in formsection!.FormFields!.OrderBy(x => x.FieldOrder))
                            {
                                string fieldKey = field.FieldType!.FieldName!.Replace(" ", "_");
                                field.FieldValue = Model.FieldValues != null &&
                                (Model.FieldValues.TryGetValue(fieldKey, out var value) ||
                                Model.FieldValues.TryGetValue(field.FieldType.FieldName, out value))
                                ? value?.ToString()
                                : null;

                                if (fieldKey == "Margin")
                                {
                                    
                                }
                                @Html.DynamicHtmlControl(field, context, stateid)
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-md-4 mb-3">
                </div>
                <div class="col-md-4 mb-3">
                    <button type="submit" id="btnRegister" name="btnRegister" class="btn btn-primary">Submit</button>
                    <button type="reset" class="btn btn-primary">Reset</button>
                    @if (Model.NavigationGroup!.ToLower() != "blank")
                    {
                        <button type="button" class="btn btn-secondary" onclick="window.history.back();" id="btnBackBorrow" name="btnBackBorrow">Back</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-secondary" onclick="parent.closeColorbox()" id="btnCloseBorrow" name="btnCloseBorrow">Close</button>
                    }
                </div>
                <div class="col-md-4 mb-3">
                </div>
            </div>

        </form>
    </div>
}
else
{
    <h3>No Form Found</h3>
}

<script src="~/js/sadmin/validation.js"></script>
<script src="~/js/sadmin/form.js"></script>
<script src="~/js/sadmin/module/dashboard.js"></script>
<script>
    function handleBackButtonClick() {
        // Check if Colorbox is active
        if (typeof $.colorbox !== "undefined" && $("#cboxOverlay").is(":visible")) {
            // If Colorbox is active, close it
            parent.closeColorbox()
        } else {
       // Otherwise, navigate back in history
            window.history.back();
        }
    }


    async function GetShortLendderInfo() {
        if (typeof loanContract == 'undefined')
            await checkMetaMaskConnection();
        else {
            if (typeof window.ethereum !== 'undefined') {
                const accounts = await ethereum.request({ method: 'eth_accounts' });
                if (accounts.length > 0) {
                    Swal.fire({
                        title: "Please wait.. we are getting the all information.",
                        didOpen: () => {
                            Swal.showLoading();
                        },
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    });
                    try {
                        let isprocess = await loanContract.IsLendder();
                        if (isprocess) {
                            let balance = await loanContract.getContractBalance();
                            if (balance != null) {
                                PreviousBalance = balance;
                                document.getElementById('header-smart-contract-balance').textContent = "Smart Contract Balance : " + balance;
                            } else {
                                document.getElementById('header-smart-contract-balance').textContent = "Smart Contract Balance : " + 0;
                            }
                            let totalborrower = await loanContract.getActiveBorrowers();
                            if (totalborrower != null) {
                                document.getElementById('header-total-active-borrow').textContent = "Total Active Borrow : " + totalborrower.length;
                            }
                            else {
                                document.getElementById('header-total-active-borrow').textContent = "Total Active Borrow : " + 0;
                            }
                            Swal.close();
                        }
                    }
                    catch {
                    }
                }
            }
        }
    }
</script>

<div class="modal fade" id="imageModal" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width:100%;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">Full-size Image</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="max-height: 80vh; overflow-y: auto;">
                <img id="modalImage" src="" alt="Full-size Image" style="max-width: 100%; height: auto;">
            </div>
        </div>
    </div>
</div>